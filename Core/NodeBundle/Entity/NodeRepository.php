<?php

namespace Id2i\Core\NodeBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Gedmo\Tree\Entity\Repository\NestedTreeRepository;
use Symfony\Component\Config\Definition\Exception\Exception;

/**
 * NodeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class NodeRepository extends NestedTreeRepository
{
    public function findRoot()
    {
        return $this->getRoot()->getQuery()->getOneOrNullResult();
    }

    public function getRoot()
    {
        return $this->_em->createQueryBuilder()->select(array('n'))->from('NodeBundle:Node', 'n')
            ->join('MultiSiteBundle:Site', 's', 'WITH', "s.node = n.id")
            ->where('s.domaine = :domaine')
            ->setParameters(array(
                "domaine" => $_SERVER['HTTP_HOST'],
            ));

    }

    public function findMasterPlacement()
    {
        return $this->findMaster('placements');
    }

    public function findMaster($type)
    {
        return $this->getMaster($type)->getQuery()->getOneOrNullResult();
    }

    /* find type */

    public function getMaster($type)
    {
        return $this->_em->createQueryBuilder()->select(array('n2'))->from('NodeBundle:Node', 'n1')
            ->join('MultiSiteBundle:Site', 's', 'WITH', "s.node = n1.id")
            ->join('NodeBundle:Node', 'n2', 'WITH', 'n2.root = n1.root AND n2.parent = n1.id')
            ->where('s.domaine = :domaine AND n2.slug = :slug')
            ->setParameters(array(
                "domaine" => $_SERVER['HTTP_HOST'],
                "slug"    => $type,
            ))
            ->addOrderBy('n2.lft', 'ASC');
    }

    public function findMasterAdministration()
    {
        return $this->findMaster('administration');
    }

    public function findMasterConfiguration()
    {
        return $this->findMaster('configuration');
    }

    public function findMasterMenuAdministration()
    {
        return $this->getMasterMenuAdministration()->getQuery()->getOneOrNullResult();
    }

    public function getMasterMenuAdministration()
    {
        return $this->_em->createQueryBuilder()->select(array('n3'))->from('NodeBundle:Node', 'n1')
            ->join('MultiSiteBundle:Site', 's', 'WITH', "s.node = n1.id")
            ->join('NodeBundle:Node', 'n2', 'WITH', 'n2.root = n1.root AND n2.parent = n1.id')
            ->join('NodeBundle:Node', 'n3', 'WITH', 'n3.root = n2.root AND n3.parent = n2.id')
            ->where('s.domaine = :domaine AND n3.slug = :slug and n2.slug = "administration"')
            ->setParameters(array(
                "domaine" => $_SERVER['HTTP_HOST'],
                "slug"    => 'menu-administration',
            ))
            ->addOrderBy('n3.lft', 'ASC');
    }

    /* get type */

    public function getMasterCategorie()
    {
        return $this->getMaster('categories');
    }

    public function getMasterPlacement()
    {
        return $this->getMaster('placements');
    }

    public function getMasterAdministration()
    {
        return $this->getMaster('administration');
    }

    public function getMasterConfiguration()
    {
        return $this->getMaster('configuration');
    }

    public function findCategories()
    {
        return $this->getCategories()->getQuery()->getResult();
    }

    public function getCategories()
    {
        $parent = $this->findMasterCategorie();

        return $this->_em->createQueryBuilder()->select(array('c'))->from('NodeBundle:Node', 'c')
            ->where('c.parent = :parent AND c.root = :root AND c.lft > :parentLft AND c.rgt < :parentRgt')
            ->setParameters(array(
                'parent'    => $parent,
                'root'      => $parent->getRoot(),
                'parentLft' => $parent->getLft(),
                'parentRgt' => $parent->getRgt(),

            ))
            ;
    }

    public function findMasterCategorie()
    {
        return $this->findMaster('categories');
    }

    public function findSousCategories(\Id2i\Core\NodeBundle\Entity\Node $parent)
    {
        return $this->getSousCategories($parent)->getQuery()->getResult();
    }

    public function getSousCategories(\Id2i\Core\NodeBundle\Entity\Node $parent)
    {
        return $this->_em->createQueryBuilder()->select(array('n'))
            ->from('NodeBundle:Node', 'n')// les sous categories
            ->where('n.parent = :parent AND n.root = :root AND n.lft > :parentLft AND n.rgt < :parentRgt')
            ->setParameters(array(
                'parent'    => $parent,
                'root'      => $parent->getRoot(),
                'parentLft' => $parent->getLft(),
                'parentRgt' => $parent->getRgt(),
            ));
    }

    public function findAllSousCategories()
    {
        return $this->getAllSousCategories()->getQuery()->getResult();
    }

    public function getAllSousCategories()
    {
        $categorie = $this->findMasterCategorie();

        return $this->_em->createQueryBuilder()->select(array('n'))
            ->from('NodeBundle:Node', 'n')
            ->where('n.root = :root AND n.lft > :parentLft AND n.rgt < :parentRgt')
            ->setParameters(array(
                'root'      => $categorie->getRoot(),
                'parentLft' => $categorie->getLft(),
                'parentRgt' => $categorie->getRgt(),
            ));
    }


    public function getCategorieByNode($node)
    {
        return $this->_em->createQueryBuilder()->select(array('n'))
            ->from('NodeBundle:Node', 'n')
            ->where('n.id = :parent')
            ->setParameters(array(
                "parent" => $node,
            ));
    }

    public function getPlacement($slug)
    {
        $node_placement = $this->_em->createQueryBuilder()->select(array('n2'))->from('Id2i\Core\NodeBundle\Entity\Node', 'n1')
            ->join('MultiSiteBundle:Site', 's', 'WITH', "s.node = n1.id")
            ->join('NodeBundle:Node', 'n2', 'WITH', 'n2.root = n1.root AND n2.lft > n1.lft AND  n2.rgt < n1.rgt')
            ->where('s.domaine = :domaine AND n2.lvl = :lvl AND n2.slug = :slug')
            ->setParameters(array(
                "domaine" => $_SERVER['HTTP_HOST'],
                "lvl"     => 2,
                "slug"    => $slug
            ))->getQuery()->getOneOrNullResult();
        if (null === $node_placement) {
            return new Exception("place " . $slug . " innexistante");
        }

        return $node_placement;
    }

    public function getPlacements(){
        $master = $this->findMasterPlacement();
        return $this->_em->createQueryBuilder()->select(array('n'))->from('Id2i\Core\NodeBundle\Entity\Node', 'n')
            ->where('n.parent = :master')
            ->setParameters(array(
                "master" => $master,
            ));


    }
    public function getByDomaineAndLvl($lvl = 2, $order = null, $limit = null)
    {
        $resp = $this->_em->createQueryBuilder()->select(array('n2'))->from('Id2i\Core\NodeBundle\Entity\Node', 'n1')
            ->join('MultiSiteBundle:Site', 's', 'WITH', "s.node = n1.id")
            ->join('NodeBundle:Node', 'n2', 'WITH', 'n2.root = n1.root AND n2.lft > n1.lft AND  n2.rgt < n1.rgt')
            ->where('s.domaine = :domaine AND n2.lvl = :lvl')
            ->setParameters(array(
                "domaine" => $_SERVER['HTTP_HOST'],
                "lvl"     => $lvl
            ));
        if (null === $order) {
            $resp->orderBy('n2.root', 'ASC')
                ->addOrderBy('n2.lft', 'ASC');
        } elseif (is_array($order)) {

            $i = 0;
            foreach ($order AS $ord) {
                $o = explode(' ', $ord);
                if ($i == 0) {
                    $resp->orderBy($o[0], $o[1]);
                } else {
                    $resp->addOrderBy($o[0], $o[1]);
                }
                $i++;
            }
        } else {
            $o = explode(' ', $order);
            $resp->orderBy($o[0], $o[1]);
        }
        if (null !== $limit) {
            $resp
                ->setFirstResult(0)
                ->setMaxResults($limit);
        }

        return $resp;

    }

    public function getByFatherAndDomaineAndLvl($id, $lvl = 3)
    {
        return $this->_em->createQueryBuilder()->select(array('n2'))->from('Id2i\Core\NodeBundle\Entity\Node', 'n1')
            ->join('MultiSiteBundle:Site', 's', 'WITH', "s.node = n1.id")
            ->join('NodeBundle:Node', 'n2', 'WITH', 'n2.root = n1.root AND n2.lft > n1.lft AND  n2.rgt < n1.rgt')
            ->where('s.domaine = :domaine AND n2.lvl = :lvl AND n2.parent = :idFather')
            ->setParameters(array(
                "domaine"  => $_SERVER['HTTP_HOST'],
                "idFather" => $id,
                "lvl"      => $lvl
            ))
            ->orderBy('n2.root', 'ASC')
            ->addOrderBy('n2.lft', 'ASC');

    }

}
